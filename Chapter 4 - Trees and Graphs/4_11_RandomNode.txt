2 - 5 - 10
|   |
1   3

1/n

myBST :: Node* getRandomNode(){
	int randomID = rand()%n + 1;
	return searchNode(root, randomID);
}

myBST :: Node* searchNode(Node *root, const int &randomID, int left=1, int right=n){
	if(!root)
		return nullptr;
	if(root -> leftChildrens + left == randomID)
		return root;
	if(root -> leftChildrens + left > randomID )
		return serchNode(root->left, randomID, left, root -> leftChildrens + left-1);
	return serchNode(root->right, randomID, root -> leftChildrens + left + 1, right);
}